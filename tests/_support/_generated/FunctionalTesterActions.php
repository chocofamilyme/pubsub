<?php  //[STAMP] 40b0ba77cee53e0883389250382a0386
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait FunctionalTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends message to exchange by sending exchange name, message
     * and (optionally) a routing key
     *
     * ``` php
     * <?php
     * $I->pushToExchange('exchange.emails', 'thanks');
     * $I->pushToExchange('exchange.emails', new AMQPMessage('Thanks!'));
     * $I->pushToExchange('exchange.emails', new AMQPMessage('Thanks!'), 'severity');
     * ?>
     * ```
     *
     * @param string $exchange
     * @param string|\PhpAmqpLib\Message\AMQPMessage $message
     * @param string $routing_key
     * @see \Codeception\Module\AMQP::pushToExchange()
     */
    public function pushToExchange($exchange, $message, $routing_key = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('pushToExchange', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends message to queue
     *
     * ``` php
     * <?php
     * $I->pushToQueue('queue.jobs', 'create user');
     * $I->pushToQueue('queue.jobs', new AMQPMessage('create'));
     * ?>
     * ```
     *
     * @param string $queue
     * @param string|\PhpAmqpLib\Message\AMQPMessage $message
     * @see \Codeception\Module\AMQP::pushToQueue()
     */
    public function pushToQueue($queue, $message) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('pushToQueue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Declares an exchange
     *
     * This is an alias of method `exchange_declare` of `PhpAmqpLib\Channel\AMQPChannel`.
     *
     * ```php
     * <?php
     * $I->declareExchange(
     *     'nameOfMyExchange', // exchange name
     *     'topic' // exchange type
     * )
     * ```
     *
     * @param string $exchange
     * @param string $type
     * @param bool $passive
     * @param bool $durable
     * @param bool $auto_delete
     * @param bool $internal
     * @param bool $nowait
     * @param array $arguments
     * @param int $ticket
     * @return mixed|null
     * @see \Codeception\Module\AMQP::declareExchange()
     */
    public function declareExchange($exchange, $type, $passive = null, $durable = null, $auto_delete = null, $internal = null, $nowait = null, $arguments = null, $ticket = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('declareExchange', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Declares queue, creates if needed
     *
     * This is an alias of method `queue_declare` of `PhpAmqpLib\Channel\AMQPChannel`.
     *
     * ```php
     * <?php
     * $I->declareQueue(
     *     'nameOfMyQueue', // exchange name
     * )
     * ```
     *
     * @param string $queue
     * @param bool $passive
     * @param bool $durable
     * @param bool $exclusive
     * @param bool $auto_delete
     * @param bool $nowait
     * @param array $arguments
     * @param int $ticket
     * @return mixed|null
     * @see \Codeception\Module\AMQP::declareQueue()
     */
    public function declareQueue($queue = null, $passive = null, $durable = null, $exclusive = null, $auto_delete = null, $nowait = null, $arguments = null, $ticket = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('declareQueue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Binds a queue to an exchange
     *
     * This is an alias of method `queue_bind` of `PhpAmqpLib\Channel\AMQPChannel`.
     *
     * ```php
     * <?php
     * $I->bindQueueToExchange(
     *     'nameOfMyQueueToBind', // name of the queue
     *     'transactionTracking.transaction', // exchange name to bind to
     *     'your.routing.key' // Optionally, provide a binding key
     * )
     * ```
     *
     * @param string $queue
     * @param string $exchange
     * @param string $routing_key
     * @param bool $nowait
     * @param array $arguments
     * @param int $ticket
     * @return mixed|null
     * @see \Codeception\Module\AMQP::bindQueueToExchange()
     */
    public function bindQueueToExchange($queue, $exchange, $routing_key = null, $nowait = null, $arguments = null, $ticket = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('bindQueueToExchange', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if message containing text received.
     *
     * **This method drops message from queue**
     * **This method will wait for message. If none is sent the script will stuck**.
     *
     * ``` php
     * <?php
     * $I->pushToQueue('queue.emails', 'Hello, davert');
     * $I->seeMessageInQueueContainsText('queue.emails','davert');
     * ?>
     * ```
     *
     * @param string $queue
     * @param string $text
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\AMQP::seeMessageInQueueContainsText()
     */
    public function canSeeMessageInQueueContainsText($queue, $text) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeMessageInQueueContainsText', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if message containing text received.
     *
     * **This method drops message from queue**
     * **This method will wait for message. If none is sent the script will stuck**.
     *
     * ``` php
     * <?php
     * $I->pushToQueue('queue.emails', 'Hello, davert');
     * $I->seeMessageInQueueContainsText('queue.emails','davert');
     * ?>
     * ```
     *
     * @param string $queue
     * @param string $text
     * @see \Codeception\Module\AMQP::seeMessageInQueueContainsText()
     */
    public function seeMessageInQueueContainsText($queue, $text) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeMessageInQueueContainsText', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Takes last message from queue.
     *
     * ``` php
     * <?php
     * $message = $I->grabMessageFromQueue('queue.emails');
     * ?>
     * ```
     *
     * @param string $queue
     * @return \PhpAmqpLib\Message\AMQPMessage
     * @see \Codeception\Module\AMQP::grabMessageFromQueue()
     */
    public function grabMessageFromQueue($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabMessageFromQueue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Purge a specific queue defined in config.
     *
     * ``` php
     * <?php
     * $I->purgeQueue('queue.emails');
     * ?>
     * ```
     *
     * @param string $queueName
     * @see \Codeception\Module\AMQP::purgeQueue()
     */
    public function purgeQueue($queueName = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('purgeQueue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Purge all queues defined in config.
     *
     * ``` php
     * <?php
     * $I->purgeAllQueues();
     * ?>
     * ```
     * @see \Codeception\Module\AMQP::purgeAllQueues()
     */
    public function purgeAllQueues() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('purgeAllQueues', func_get_args()));
    }
}
